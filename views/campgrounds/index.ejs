<% layout("layouts/boilerplate") %>

    <link rel="stylesheet" href="/stylesheets/search.css">
    <div style="height: 450px;" class="mb-5">
       <div id="map" style="width: 100%; height: 450px" class="position-absolute start-0"></div> 
    </div>
    
    

    <div class="row mb-5">
        <div class="col-md-6 mx-auto">
                <!-- Custom rounded search bars with input group -->
                <form action="/campgrounds">
                    <div class="p-2 bg-light rounded rounded-pill shadow-sm mb-4 border focus-ring-none focus-ring-white">
                         <div class="input-group">
                                <input type="search" placeholder="Search Campground" name="q" aria-describedby="button-addon1" value="<%= q %>" class="form-control border-0 bg-light">
                                <div class="input-group-append">
                                    <button id="button-addon1" type="submit" class="btn btn-search text-black shadow-none" ><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                                        <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0"/>
                                      </svg></button>
                                </div>
                        </div>
                    </div>
                </form>
                <!-- End -->
            </div>
        </div>
    <div>
        <h1 class="mb-4">All Campgrounds</h1>
    </div>
        <% if (allCampgrounds.length) { %>
            <% allCampgrounds.forEach(campground => { %>
                <div class="card mb-4" onclick="location.href='/campgrounds/<%= campground._id %>';" style="cursor: pointer;">
                    <div class="row">
                        <div class="col-md-4">
                            <% if (campground.images.length) { %>
                                <img crossorigin="anonymous" src="<%= campground.images[0].url %>" alt="" class="img-fluid" style="height: fit-content;">
                            <% } else { %>
                                <img src="" alt="" class="img-fluid" style="height: fit-content;">
                            <% } %>
                        </div>
                        <div class="col-md-8">
                            <div class="card-body">
                                <h5 class="class-title"><%= campground.title %></h5>
                                <p class="card-text"><%= campground.description %></p>
                                <p class="card-text"><small class="text-secondary"><%= campground.location %></small></p>
                                <a href="/campgrounds/<%= campground._id %>" class="btn btn-warning">View Campground</a>
                            </div>
                        </div>
                    </div>
                </div>
            <% }); %>
        <% } else { %>
            <div class="mt-5">
                <h5>Sorry! No result found</h5>
            </div>
        <% } %>
   

<script>
    document.querySelector("#button-addon1").addEventListener("submit", function(e) {
        if (!document.querySelector("#button-addon1").value) {
            e.preventDefault();
        }})
</script>

<script>
    const mapToken = '<%-process.env.MAPBOX_TOKEN%>';
    const campgrounds = { "features": <%- JSON.stringify(allCampgrounds) %> };

    mapboxgl.accessToken = mapToken;

    const map = new mapboxgl.Map({
    container: 'map',
    style: 'mapbox://styles/mapbox/light-v10',
    center: [-103.59179687498357, 40.66995747013945],
    zoom: 3
    });


        map.on('load', function () {
            // Add a new source from our GeoJSON data and
            // set the 'cluster' option to true. GL-JS will
            // add the point_count property to your source data.
            map.addSource('campgrounds', {
                type: 'geojson',
                // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes
                // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.
                data: campgrounds,
                cluster: true,
                clusterMaxZoom: 14, // Max zoom to cluster points on
                clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
            });

            map.addLayer({
                id: 'clusters',
                type: 'circle',
                source: 'campgrounds',
                filter: ['has', 'point_count'],
                paint: {
                    // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
                    // with three steps to implement three types of circles:
                    //   * Blue, 20px circles when point count is less than 100
                    //   * Yellow, 30px circles when point count is between 100 and 750
                    //   * Pink, 40px circles when point count is greater than or equal to 750
                    'circle-color': [
                        'step',
                        ['get', 'point_count'],
                        '#00BCD4',
                        10,
                        '#2196F3',
                        30,
                        '#3F51B5'
                    ],
                    'circle-radius': [
                        'step',
                        ['get', 'point_count'],
                        15,
                        10,
                        20,
                        30,
                        25
                    ]
                }
            });

            map.addLayer({
                id: 'cluster-count',
                type: 'symbol',
                source: 'campgrounds',
                filter: ['has', 'point_count'],
                layout: {
                    'text-field': '{point_count_abbreviated}',
                    'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
                    'text-size': 12
                }
            });

            map.addLayer({
                id: 'unclustered-point',
                type: 'circle',
                source: 'campgrounds',
                filter: ['!', ['has', 'point_count']],
                paint: {
                    'circle-color': '#11b4da',
                    'circle-radius': 5,
                    'circle-stroke-width': 1,
                    'circle-stroke-color': '#fff'
                }
            });

            // inspect a cluster on click
            map.on('click', 'clusters', function (e) {
                const features = map.queryRenderedFeatures(e.point, {
                    layers: ['clusters']
                });
                const clusterId = features[0].properties.cluster_id;
                map.getSource('campgrounds').getClusterExpansionZoom(
                    clusterId,
                    function (err, zoom) {
                        if (err) return;

                        map.easeTo({
                            center: features[0].geometry.coordinates,
                            zoom: zoom
                        });
                    }
                );
            });

            // When a click event occurs on a feature in
            // the unclustered-point layer, open a popup at
            // the location of the feature, with
            // description HTML from its properties.
            map.on('click', 'unclustered-point', function (e) {
                const {randomize} = e.features[0].properties;
                const { popUpMarkup } = e.features[0].properties;
                console.log("event", e.features)
                console.log("event", e.features[0].geometry.coordinates)
                console.log("campgrounds", campgrounds)
                
                // returns the campground that match the condition, and then store it in an array
                const filteredCampgrounds = campgrounds.features.filter(campground => {
                    return parseFloat(campground.geometry.coordinates[0].toFixed(3)) === parseFloat(e.features[0].geometry.coordinates[0].toFixed(3)) 
                    && parseFloat(campground.geometry.coordinates[1].toFixed(3)) === parseFloat(e.features[0].geometry.coordinates[1].toFixed(3));
                });

                const location = filteredCampgrounds[0].location; // use one location even if > 1
                const title = filteredCampgrounds.map(campground => {
                    return `<a href='/campgrounds/${campground._id}'> ${campground.title}</a>`
                })

                const coordinates = e.features[0].geometry.coordinates.slice();

                // Ensure that if the map is zoomed out such that
                // multiple copies of the feature are visible, the
                // popup appears over the copy being pointed to.
                while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                    coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
                }

                new mapboxgl.Popup()
                    .setLngLat(coordinates)
                    .setHTML(
                        `<h5>${title}</h5>${location}`
                        )
                    .addTo(map);
            });

            map.on('mouseenter', 'clusters', function () {
                map.getCanvas().style.cursor = 'pointer';
            });
            map.on('mouseleave', 'clusters', function () {
                map.getCanvas().style.cursor = '';
            });
        });
    
</script>